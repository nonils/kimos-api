name: Build, Containerize and Deploy to AWS ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  ECS_SERVICE: ${{ secrets.AWS_ECS_SERVICE }}
  ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Use Node.js 18
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Build, tag, and push Docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            LOG_LEVEL=info
            ENVIRONMENT=prod
            NODE_NAME=${{ secrets.NODE_NAME }}
            PORT=${{ secrets.AWS_APP_PORT }}
            REDIS_CONNECTION_STRING=${{ secrets.REDIS_CONNECTION_STRING }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}
            MODE=${{ secrets.MODE }}
            RUN_MIGRATIONS=${{ secrets.RUN_MIGRATIONS }}
            GH_APP_NAME=${{ secrets.GH_APP_NAME }}
            GH_APP_URL=${{ secrets.GH_APP_URL }}
            GITHUB_APP_ID=${{ secrets.GH_APP_ID }}
            GITHUB_CLIENT_ID=${{ secrets.GH_CLIENT_ID }}
            GITHUB_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }}
            AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }}
            AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE }}
            CLIENT_ORIGIN_URL=${{ secrets.CLIENT_ORIGIN_URL }}
            GITHUB_PRIVATE_KEY=${{ secrets.GITHUB_PRIVATE_KEY }}
            GITHUB_API_URL=${{ secrets.GITHUB_API_URL }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}